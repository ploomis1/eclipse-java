package edu.wmich.cs1120.spring2016.assignment2.recursion;

public class TreeDataStructure1 implements Node {

	
		private String parentID;
		private String firstid;
		private String id;
		TreeDataStructure1 left;
		TreeDataStructure1 rigth;
		private int n;
		//Node parent;
	/**
	 * a constructor to initialize the tree
	 * @param node: the first parent of all
	 * 
	 */
		public TreeDataStructure1(String id){
			this.id=id;
			
		}
	    public TreeDataStructure1(String id, String parentID){
			this.id=id;
			this.parentID = parentID;
			
		}
	    
		 public boolean addChild(String ID, String parentID) {
			 TreeDataStructure1 newNode = new TreeDataStructure1(ID, parentID);
			 boolean nodetem;
			 if(parentID.equals(this.id) ){
				 if(this.left == null){
					 this.left = newNode;
					 
					return true;
				 }else{
					 if(this.rigth == null){
						 
						 this.rigth = newNode;
						 return true;
					 }else{
						 return false;
					 }
				 }
				
				
			 }else{// it is not equal
				 //
				 
				 if(this.left != null){
				      nodetem =left.addChild(ID, parentID);
				      if(nodetem == true){
				    	  return true;
				      }else{
				    	  if(this.rigth != null){
								return rigth.addChild(ID, parentID);			
							 }else{
								return false;
							 }
				      }
		
				 }else{
					 
					 return false;
				 }
			 }
			
			
		}
		 /**
		  * 
				 
		  */
		 
	    @Override
		
		/**
		* Looks within the tree to find if value is contained
		* in that subtree with recursion 
		* @param value: a string to be found in the tree
		* @return the node if is founded
		*/
		public Node find(String value) {
		
			return null;
		}
	    
	    public String toString(){
	    	
			return parentID + " has " + id;
	    	
	    	
	    }

		@Override
		/**
		 * This method is to print the parent and  the children each line
		 * using recursion method and the function toString
		 * 
		 */
		
		public void printTree() {
			
			//System.out.println(rigth.getParent().getId());
			
			
			if (left != null) {
				System.out.println(left.toString());
				left.printTree();
			}
			
			if(rigth != null){
				System.out.println(rigth.toString());
				rigth.printTree();
			}
			/**if(left==null){
				System.out.println(left.toString());
				left.printTree();
			}
			if(rigth==null){
				System.out.println(rigth.toString());
				rigth.printTree();}*/
			
		}
		
		
		 
		
		

		@Override
		/**
		 * Get the parent of the node received
		 * @return the parent of the child
		 */
		public Node getParent() {
			TreeDataStructure1	node = new TreeDataStructure1(parentID);
			// TODO Auto-generated method stub
			return node;
		}

		@Override
		/**
		 * function to get  the size of the tree from the node that is  
		 * consider and called parent or the case will be the first node known as root
	     * @return the size of the tree starting from the node that is used to call
	     * this function, all the way down to the leaf nodes.
	     */
		public int size() {
			// TODO Auto-generated method stub
			return 0;
		}
		public boolean isEmpty() {
	        return size() == 0;
	    }

		@Override
		/**
		* function to get the ID of the node.
		* @return String representation of the node ID 
		* 
		* */
		public String getId() {
			// TODO Auto-generated method stub
			return id;
		}

		
	}
